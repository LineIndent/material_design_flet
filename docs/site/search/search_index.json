{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Flet Material Library","text":""},{"location":"#getting-started","title":"Getting Started","text":"<p>Flet Material Library is a material theme built for Flet framework, which allows building interactive multi-user web, desktop, and mobile applications in your favorite language without prior experience in frontend development. If you're already familiar with Flet, then you can easily implement the following library to make your applications modern, professional, and eye-catching. </p>"},{"location":"#installation-guide","title":"Installation Guide","text":""},{"location":"#python-pip-package","title":"Python PIP Package","text":"<p>Currently you can get Flet Material Library by using the popular Python package manager <code>pip</code>. Ideally, you'll want to install this, as well as the main Flet library in a virtual environment. Open up a terminal and enter the following command:</p> <pre><code>pip install flet-material\n</code></pre> <p>Warning: Python Version Compatibility</p> <p>Please note that Flet requires Python 3.7 or higher. If you're using an older version of Python, you may encounter errors when trying to use Flet. Additionally, some of the features of Flet may not be available in older versions of Python. Therefore, we recommend that you ensure your Python installation is up-to-date before attempting to use Flet.</p>"},{"location":"#github-clone","title":"GitHub Clone","text":"<p>To clone the material_design_flet repository from GitHub, open a terminal or command prompt and navigate to the directory where you want to store the cloned repository. Then, run the following command:</p> <pre><code>git clone https://github.com/LineIndent/material_design_flet.git\n</code></pre> <p>This will download the repository to your local machine, and you can then start using the material design components in your Flet-based Python applications.</p>"},{"location":"#application-setup","title":"Application Setup","text":"<p>Once the library is installed successfully on your system, create a main.py file in the desired directory. Then, implement the following code in your file:</p> main.py <pre><code># Core modules for your application\nimport flet as ft\nimport flet_material as fm\n# Set your application theme\nfm.Theme.set_theme(theme=\"blue\")\n# Your main method with all your components\ndef main(page: ft.Page):\npage.bgcolor = fm.Theme.bgcolor\npage.update()\nif __name__ == \"__main__\":\nft.flet.app(target=main)\n</code></pre> <p>You now have access to all the material design components in your application!</p>"},{"location":"#next-steps","title":"Next Steps?","text":"<p>If your setup is complete, there are a few things you can do:</p> <p>What's Next?</p> <ul> <li>Visit the Line Indent YouTube Channel and check out any relevant videos for your current project.</li> <li>Explore the navigation pannel above for library specific projects. I've tried to best explain the code here to make the programming experience easier.</li> <li>See a project you're intrested in and want to clone it? Visit the channel's GitHub to easily access content for your softeware development project.</li> <li>You can also report issues or bugs through the GitHub repository. </li> </ul>"},{"location":"contribute/","title":"Contributing to Flet Material","text":"<p>Contriubtions and suggustions are highly appreciated and welcomed. To contirubte to this library, follow the steps below in order to ensure optimal organization and implementation.</p> <p>Before you take the steps below, make sure you've forked the repository before.</p>"},{"location":"contribute/#clone-the-repository","title":"Clone the repository","text":"<p>Clone the forked repository to your local machine by running the following command in your terminal:</p> <pre><code>git clone https://github.com/your-username/material_design_flet.git\n</code></pre> <p>Make sure to replace your-username with your actual GitHub username.</p> <p>Navigate to the cloned repository by running the command:</p> <pre><code>cd material_design_flet\n</code></pre>"},{"location":"contribute/#makeing-changes-to-the-cloned-repository","title":"Makeing changes to the cloned repository","text":"<p>Make the changes to the code on your local machine. For example, you could update the README file to include more information about the project.</p> <p>Once you have made your changes, commit them with a clear and descriptive message by running the following commands:</p> <ol> <li> <p>This will add all the changes made to the local repository.</p> <pre><code>git add .\n</code></pre> </li> <li> <p>This will commit the changes to the local repository.</p> <pre><code>git commit -m \"Added more information to README\"\n</code></pre> </li> <li> <p>Push the branch to your forked repository on GitHub by running the command:</p> <pre><code>git push\n</code></pre> </li> </ol>"},{"location":"contribute/#submit-a-pull-request","title":"Submit a pull request","text":"<p>Go to the original repository you forked from Flet Material Library and click the \"New pull request\" button. Give your pull request a clear and descriptive title and description, explaining what changes you made and why. For example, \"Added more information to README file\". Review your pull request to make sure everything looks good and submit it for review by the repository owner or maintainers.</p>"},{"location":"controls/","title":"Configuration","text":"<p>Flet Material Library has many customized controls that can be used in your Flet-based applications. This section of the documentation will go through the steps to customize your app's theme, which will set the appropriate settings for the rest of the controls. </p>"},{"location":"controls/#setting-the-theme-in-your-flet-application","title":"Setting the theme in your Flet application","text":""},{"location":"controls/#application-setup","title":"Application setup","text":"<p>Before selecting your application theme color, make sure the following line of code is included in your main script:</p> <pre><code>fm.Theme.set_theme(theme=\"\")\n</code></pre>"},{"location":"controls/#choosing-a-theme-color","title":"Choosing a theme color","text":"<p>Below you'll find all the  supported theme colors offered Flet Material Library. Once you've decided on a theme, you can set it in your Flet application like this:</p> <pre><code>fm.Theme.set_theme(theme=\"indigo\")\n</code></pre> <p>The theme argument is case sensitive - all colors names should be lower case and with spaces!</p> Red Pink Purple Indigo Blue Light Blue Cyan Teal Green Lime Yellow Amber Orange Earth Slate Black White <p>Now that you've set up your theme color, you can easily implement the controls you want inside your flet application. Visit each control page to get more details on their properties. </p>"},{"location":"controls/alerts/","title":"Alerts","text":"<p>Alerts are commonly used to provide users with important information, such as warnings or errors, that require their attention. They can be designed to be visually prominent, with attention-grabbing colors and animations, to ensure that the user notices them. Alerts can also be used to confirm a successful action or completion of a task.</p> <p>The alerts class is straightforward and easy to use. Choose where you want to place your annotation then create an instance of it, like this:</p> <p>Basic Alerts Example</p> <p>Flet Material Alerts</p> <p>The Flet Material Library classes inherit from the controls provided by Flet. In this case, the <code>fm.Alerts()</code> class inherits from Flet's <code>ft.Container()</code> class, this means all properties of the latter are accessable through the former. </p> Alertsparameters <pre><code>import flet as ft\nimport flet_material as fm\nfm.Theme.set_theme(theme=\"blue\")\ndef main(page: ft.Page):\npage.bgcolor = fm.Theme.bgcolor\npage.horizontal_alignment = \"center\"\npage.vertical_alignment = \"center\"\nalert = fm.Alerts(\ntype_=\"info\",\nsize=\"lg\",\ntitle=\"Did you know?\",\ncomment=\"Now you know what you know.\",\n)\npage.add(alert)\npage.update()\nif __name__ == \"__main__\":\nft.flet.app(target=main)\n</code></pre> <p>type_: str - The type of alert to be displayed.</p> <pre><code>- \"info\": displays a blue-colored alert.\n- \"warn\": displays a yellow-colored alert.\n- \"question\": displays a green-colored alert.\n</code></pre> <p>size: str - Sets the width dimension of the alert.</p> <pre><code>- \"sm\": sets width at 250.\n- \"md\": sets width at 300.\n- \"lg\": 350.\n</code></pre> <p>title: str - The title to be displayed. This is the first row. </p> <p>comment: str - The message to be displayed. This is the second row. </p>"},{"location":"controls/annotations/","title":"Annotations","text":"<p>Annotations, much like tootips, are used to provide additional context or information about a UI element. They can be used to provide instructions or tips for using a particular feature or to label specific parts of an interface. Annotations can also be used to indicate the status of an element, such as whether it is currently active or disabled.</p> <p>The annotations class is straightforward and easy to use. Choose where you want to place your annotation then create an instance of it, like this:</p> <p>Basic Annotation Example</p> <p>Flet Material Annotations</p> <p>The Flet Material Library classes inherit from the controls provided by Flet. In this case, the <code>fm.Annotations()</code> class inherits from Flet's <code>ft.Container()</code> class, this means all properties of the latter are accessable through the former. </p> Annotationsparameters <pre><code>import flet as ft\nimport flet_material as fm\ndef main(page: ft.Page):\npage.bgcolor = fm.Theme.bgcolor\nannotation = fm.Annotations(\"This is an annotated message!\")\npage.add(annotation)\npage.update()\nif __name__ == \"__main__\":\nft.flet.app(target=main)\n</code></pre> <p>annotations_msg: str - The content to be shown when annotation is hovered. </p>"},{"location":"controls/badges/","title":"Badges","text":"<p>Badges are used to display small amounts of information, such as notifications or counts, in a visually prominent way. They can be used to indicate the number of new messages, the number of items in a cart, or to show user status, such as whether they are online or offline. Badges can be designed in various styles, such as with a numerical count or an icon.</p> <p>The badges class is straightforward and easy to use. There are currently two types of badges, notifications and icon bagdes, each having its own unique material design. Choose where you want to place your annotation then create an instance of it, like this:</p> <p>Basic Notifications Badge Example</p> <p>Flet Material Badges</p> <p>The Flet Material Library classes inherit from the controls provided by Flet. In this case, both the <code>fm.NotificationBadge()</code> and the <code>fm.IconBadge()</code> classes inherit from Flet's <code>ft.Container()</code> class, this means all properties of the latter are accessable through the former. </p> Notifications Badgeparameters <pre><code>import flet as ft\nimport flet_material as fm\nfm.Theme.set_theme(theme=\"blue\")\ndef main(page: ft.Page):\npage.bgcolor = fm.Theme.bgcolor\npage.horizontal_alignment = \"center\"\npage.vertical_alignment = \"center\"\ndef show_notification(e):\nbadge.notification += 1\nbadge.add_notification(badge.notification)\nbtn = ft.ElevatedButton(on_click=lambda e: show_notification(e))\nbadge = fm.NotificationBadge(title=\"Hello!\", size=\"md\", notification=0)\npage.add(badge)\npage.add(btn)\npage.update()\nif __name__ == \"__main__\":\nft.flet.app(target=main)\n</code></pre> <p>title: str - The text to be displayed.</p> <p>size: str - The width of the notifications badge:</p> <pre><code>- \"sm\": sets the width at 55.\n- \"md\": sets the width at 90.\n- \"lg\": sets the width at 135.\n- \"xl\": sets the width at 165.\n</code></pre> <p>notification: int - The starting notification count number. </p> <p>Basic Icon Badge Example</p> Icon Badgeparameters <pre><code>import flet as ft\nimport flet_material as fm\nfm.Theme.set_theme(theme=\"blue\")\ndef main(page: ft.Page):\npage.bgcolor = fm.Theme.bgcolor\npage.horizontal_alignment = \"center\"\npage.vertical_alignment = \"center\"\ndef show_notification(e):\nbadge.notification += 1\nbadge.add_notification(badge.notification)\nbtn = ft.ElevatedButton(on_click=lambda e: show_notification(e))\nbadge = fm.IconBadge(bagde_icon=\"email\", notification=0)\npage.add(badge)\npage.add(btn)\npage.update()\nif __name__ == \"__main__\":\nft.flet.app(target=main)\n</code></pre> <p>bagde_icon: str - The icon to be displayed:</p> <pre><code>Supported icons:\n\n    - \"email\"\n    - \"facebook\"\n    - \"notification\"\n    - \"cart\"\n</code></pre> <p>notification: int - The starting notification count number. </p>"},{"location":"controls/buttons/","title":"Buttons","text":"<p>Buttons are one of the most common UI elements used in applications. They are used to trigger actions, such as submitting a form or navigating to a different part of the application. Buttons can be designed in various styles, such as flat or raised, and can have different shapes and sizes depending on their purpose.</p> <p>The buttons class is straightforward and easy to use. Choose where you want to place your annotation then create an instance of it, like this:</p> <p>Basic Button Example</p> <p>Flet Material Button Class</p> <p>The Flet Material Library classes inherit from the controls provided by Flet. In this case, the fm.Buttons() class inherits from Flet's ft.Container() class, this means all properties of the latter are accessable through the former. </p> Buttonsparameters <pre><code>import flet as ft\nimport flet_material as fm\nfm.Theme.set_theme(theme=\"blue\")\ndef main(page: ft.Page):\npage.bgcolor = fm.Theme.bgcolor\npage.horizontal_alignment = \"center\"\npage.vertical_alignment = \"center\"\nbutton = fm.Buttons(\nwidth=220,\nheight=55,\ntitle=\"Give this repo a star!\",\n)\npage.add(button)\npage.update()\nif __name__ == \"__main__\":\nft.flet.app(target=main)\n</code></pre> <p>width: int - The width of the button.</p> <p>height: int - The height of the button.</p> <p>title: str - The text to be displayed inside the button.</p>"},{"location":"controls/checkboxes/","title":"CheckBoxes","text":"<p>Checkboxes are used to allow users to select one or multiple options from a set of choices. They are commonly used in forms and settings menus to allow users to customize their preferences. Checkboxes can be designed in various styles, such as with a checkmark or a filled-in box, to provide visual feedback to the user.</p> <p>The checkbox class is straightforward and easy to use. Choose where you want to place your annotation then create an instance of it, like this:</p> <p>Basic CheckBox Example</p> <p>Flet Material CheckBox</p> <p>The Flet Material Library classes inherit from the controls provided by Flet. In this case, the <code>fm.CheckBox()</code> class inherits from Flet's <code>ft.Container()</code> class, this means all properties of the latter are accessable through the former. </p> Checkboxesparameters <pre><code>import flet as ft\nimport flet_material as fm\nfm.Theme.set_theme(theme=\"blue\")\ndef main(page: ft.Page):\npage.bgcolor = fm.Theme.bgcolor\npage.horizontal_alignment = \"center\"\npage.vertical_alignment = \"center\"\ncircle_checkbox = fm.CheckBox(\"circle\")\nrectangular_checkbox = fm.CheckBox(\"rectangle\")\npage.add(circle_checkbox)\npage.add(rectangular_checkbox)\npage.update()\nif __name__ == \"__main__\":\nft.flet.app(target=main)\n</code></pre> <p>shape: str - The shape of the checkbox.</p> <pre><code>- \"circle\": The checkbox is a circle.\n- \"rectangle\": The checkbox is a rectangle with no border adjustments.\n</code></pre>"},{"location":"controls/chips/","title":"Chips","text":"<p>Chips are small UI elements used to display small amounts of information in a compact way. They can be used to show user information, such as a profile picture or name, or to display tags or categories. Chips can be designed in various shapes and sizes, and can be used to represent different types of data.</p> <p>The chips class is straightforward and easy to use. Choose where you want to place your annotation then create an instance of it, like this:</p> <p>Basic Chips Example</p> <p>Flet Material Chips</p> <p>The Flet Material Library classes inherit from the controls provided by Flet. In this case, the <code>fm.FilterChip()</code> class inherits from Flet's <code>ft.Container()</code> class, this means all properties of the latter are accessable through the former. </p> Chipsparameters <pre><code>import flet as ft\nimport flet_material as fm\nfm.Theme.set_theme(theme=\"blue\")\ndef main(page: ft.Page):\npage.bgcolor = fm.Theme.bgcolor\npage.horizontal_alignment = \"center\"\npage.vertical_alignment = \"center\"\nchip = fm.FilterChip(title=\"Hello World!\", chip_width=123)\npage.add(chip)\npage.update()\nif __name__ == \"__main__\":\nft.flet.app(target=main)\n</code></pre> <p>title: str - The title to be displayed. </p> <p>width: int - Set the width to accomodate both controls. </p>"},{"location":"controls/dropdowns/","title":"Dropdown","text":"<p>Dropdowns are used to allow users to select one option from a list of choices. They are commonly used in menus and settings to provide a compact way to present a large number of options. Dropdowns can be designed in various styles, such as with a simple list or with additional information, such as icons or descriptions.</p> <p>The dropdown class is straightforward and easy to use. Choose where you want to place your annotation then create an instance of it, like this:</p> <p>Basic Dropdown Example</p> <p>Flet Material Alerts</p> <p>The Flet Material Library classes inherit from the controls provided by Flet. In this case, the <code>fm.Admonitions()</code> class inherits from Flet's <code>ft.Container()</code> class, this means all properties of the latter are accessable through the former. </p>"},{"location":"controls/dropdowns/#expandable-dropdown","title":"Expandable Dropdown","text":"Expandable Dropdownparameters <pre><code>import flet as ft\nimport flet_material as fm\nfm.Theme.set_theme(theme=\"blue\")\ndef main(page: ft.Page):\npage.bgcolor = fm.Theme.bgcolor\npage.horizontal_alignment = \"center\"\npage.vertical_alignment = \"center\"\ndrop = fm.Admonitions(\ntype_=\"note\", expanded_height=300, expanded=False, controls_list=None\n)\npage.add(drop)\npage.update()\nif __name__ == \"__main__\":\nft.flet.app(target=main)\n</code></pre> <p>type_: str - The type of title to be displayed. The following parameters are supported:</p> <pre><code>- \"note\", \"abstract\", \"info\", \"tip\", \"success\", \"warning\", \"danger\"\n</code></pre> <p>expanded_height: int - Sets the height when the dropdown is clicked.</p> <p>expanded: bool - If placed outside a ft.Row() or ft.Column(), should be set to False, otherwise set to True. </p> <p>controls_list: list - The list of controls that can be added inside the dropdown. </p>"},{"location":"controls/dropdowns/#fixed-dropdown-title-only","title":"Fixed Dropdown (Title only)","text":"<p>This class simply displays the title and it's corresponding icon. It cannot be expanded. </p> Fixed Dropdownparameters <pre><code>import flet as ft\nimport flet_material as fm\nfm.Theme.set_theme(theme=\"blue\")\ndef main(page: ft.Page):\npage.bgcolor = fm.Theme.bgcolor\npage.horizontal_alignment = \"center\"\npage.vertical_alignment = \"center\"\nfixed_drop = fm.FixedAdmonitions(\ntype_=\"tip\", expanded=False, title=\"This is type of dropdown is not a dropdown!\"\n)\npage.add(fixed_drop)\npage.update()\nif __name__ == \"__main__\":\nft.flet.app(target=main)\n</code></pre> <p>type_: str - The type of title to be displayed. The following parameters are supported:</p> <pre><code>- \"note\", \"abstract\", \"info\", \"tip\", \"success\", \"warning\", \"danger\"\n</code></pre> <p>expanded: bool - If placed outside a ft.Row() or ft.Column(), should be set to False, otherwise set to True. </p> <p>title: str - The title to be displayed on top, neaer the icon. </p>"},{"location":"controls/switches/","title":"Switches","text":"<p>Switches are UI elements that allow users to toggle between two states, typically on and off. They are often represented as a small rectangular or circular button with a sliding mechanism that moves from one side to the other when toggled. Switches are popular in mobile and desktop applications due to their simplicity and ease of use.</p> <p>The switches class is straightforward and easy to use. Choose where you want to place your annotation then create an instance of it, like this:</p> <p>Basic Switch Example</p> <p>Flet Material Switches</p> <p>The Flet Material Library classes inherit from the controls provided by Flet. In this case, the <code>fm.Switches()</code> class inherits from Flet's <code>ft.Container()</code> class, this means all properties of the latter are accessable through the former. </p> Switches <pre><code>import flet as ft\nimport flet_material as fm\nfm.Theme.set_theme(theme=\"blue\")\ndef main(page: ft.Page):\npage.bgcolor = fm.Theme.bgcolor\npage.horizontal_alignment = \"center\"\npage.vertical_alignment = \"center\"\nswitch = fm.Switchs()\npage.add(switch)\npage.update()\nif __name__ == \"__main__\":\nft.flet.app(target=main)\n</code></pre>"}]}